import io;
Simple {
    .construct Simple().V {
    invokespecial(this, "<init>").V;
    }
    
    .method public add(a.i32, b.i32).i32 {
        temp_0.i32 :=.i32 invokevirtual(this, "constInstr").i32;
        c.i32 :=.i32 $1.a.i32 +.i32 temp_0.i32;
        ret.i32 c.i32;
    }
    
    .method public static main(args.array.String).Simple {
        a.i32 :=.i32 20.i32;
        b.i32 :=.i32 10.i32;
        temp_2.Simple :=.Simple new(Simple).Simple;
        invokespecial(temp_2.Simple,"<init>").V;
        ret.Simple temp_2.Simple;
    }
    
    .method public constInstr().i32 {
        c.i32 :=.i32 0.i32;
        c.i32 :=.i32 4.i32;
        c.i32 :=.i32 8.i32;
        c.i32 :=.i32 14.i32;
        c.i32 :=.i32 250.i32;
        c.i32 :=.i32 400.i32;
        c.i32 :=.i32 1000.i32;
        c.i32 :=.i32 100474650.i32;
        c.i32 :=.i32 10.i32;
        ret.i32 c.i32;
    }

}
