import io;

class Presentation {
    int classField;

    public int addMultConstants() {
        int x = 1 + 2 * 3 + 4;
        return x;
    }

    public int addMultVars() {
        int a = 2;
        int b = 3;
        int c = 4;
        int x = 1 + a * b + c;
        return x;
    }

    public int addMultVarsParams(int a, int b, int c) {
        return 1 + a * b + c;
    }

    public int multDivLeftAssociativity() {
        int a = 4;
        int b = 2;
        int c = 3;
        int x = a / b * c;
        return x;
    }

    public int varLookupField() {
        int x = classField + 1;
        return x;
    }

    public int varLookupLocal(int a) {
        int x = a + 1;
        return x;
    }

    public int varLookupParam(int a, int b) {
        int x = a + b;
        return x;
    }

    public int[] runAll(){
        int[] res;
        res = new int[3];
        res[0] = this.testLargeNumberOfVariables();
        res[1] = this.testComplexControlFlow();
        res[2] = this.testRecursiveFunctions();
        return res;
    }

    public int testRegisters(Presentation reg){
        int[] res = reg.runAll();
        int i = res.length - 1;
        while (i >= 0){
            io.println(res[i]);
            i = i - 1;
        }
        return 0;
    }

    public int testLargeNumberOfVariables() {
        int a = 1;
        int b = 2;
        int c1=0;
        int c2=0;
        int c3=0;
        int c4=0;
        int c5=0;
        int c6=0;
        int c7=0;
        int c8=0;
        int c9=0;
        int c10=0;
        int c11=0;
        int c12=0;
        int c13=0;
        int c14=0;
        int c15=0;
        int c16=0;
        int c17=0;
        int c18=0;
        int c19=0;
        int c20=0;
        int result = a + b + c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 + c10 + c11 + c12 + c13 + c14 + c15 + c16 + c17 + c18 + c19 + c20;
        return result;
    }

    public int testComplexControlFlow() {
        int a = 1;
        int b = 2;
        int i = 0;
        int result = 0;
        if (a > 0) {
            while(i < 10){
                result = result + b;
                i = i+1;
            }
        } else {
            while (b > 0) {
                result = result - b;
                b = b - 1;
            }
        }
        return result;
    }

    public int recursiveFunction(int n) {
        int res = 0;
        if (n > 0) {
            res = n + this.recursiveFunction(n - 1);
        }
        return res;
    }

    public int testRecursiveFunctions() {
        int result = this.recursiveFunction(5);
        return result;
    }

    public static void main(String[] args) {
        int a = 4;
        int b = 2;
        int c = 3;

        Presentation calc = new Presentation();
        io.println(calc.addMultConstants());
        io.println(calc.addMultVars());
        io.println(calc.addMultVarsParams(a, b, c));
        io.println(calc.multDivLeftAssociativity());
        io.println(calc.varLookupField());
        io.println(calc.varLookupLocal(7));
        io.println(calc.varLookupParam(2, 3));
        io.println(2 * 3 + 5 + (2 * 10) * ((3 + 7) * 5));

        // Register allocation:
        calc.testRegisters(calc);
    }

}
